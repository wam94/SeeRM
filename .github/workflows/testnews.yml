name: External Intel (News)

on:
  workflow_dispatch:
    inputs:
      callsigns:
        description: "Optional: comma-separated callsigns to limit run"
        required: false
        type: string
      preview_only:
        description: "Preview (no email) — true/false"
        required: false
        default: "true"
        type: choice
        options: ["true","false"]
      lookback_days:
        description: "Intel lookback window (days)"
        required: false
        default: "10"
        type: string
      max_per_org:
        description: "Max items per org (after dedupe)"
        required: false
        default: "5"
        type: string
      send_to:
        description: "Override recipient (defaults to GMAIL_USER)"
        required: false
        type: string
  schedule:
    # Mondays 13:00 UTC (~9am ET during DST). Adjust as you like.
    - cron: "0 13 * * MON"

permissions:
  contents: read

concurrency:
  group: news-weekly-${{ github.ref }}
  cancel-in-progress: false

jobs:
  external-intel:
    runs-on: ubuntu-latest
    timeout-minutes: 40

    steps:
      - name: Check out
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Notion preflight (robust)
        env:
          NOTION_API_KEY: ${{ secrets.NOTION_API_KEY || '' }}
          NOTION_COMPANIES_DB_ID: ${{ secrets.NOTION_COMPANIES_DB_ID || '' }}
          NOTION_INTEL_DB_ID: ${{ secrets.NOTION_INTEL_DB_ID || '' }}
        run: |
          if [ -z "${NOTION_API_KEY}" ] || [ -z "${NOTION_COMPANIES_DB_ID}" ] || [ -z "${NOTION_INTEL_DB_ID}" ]; then
            echo "Skipping Notion preflight (missing NOTION_* secrets)."; exit 0
          fi
          python - <<'PY'
          import os, re, sys, requests
      
          token = os.environ["NOTION_API_KEY"]
          comp  = os.environ["NOTION_COMPANIES_DB_ID"]
          intel = os.environ["NOTION_INTEL_DB_ID"]
          H = {"Authorization": f"Bearer {token}", "Notion-Version": "2022-06-28"}
      
          def undash(uuid_str):
            return uuid_str.replace("-", "")
      
          def dash32(hex32):
            # insert dashes 8-4-4-4-12 if it's exactly 32 hex chars
            if re.fullmatch(r"[0-9a-fA-F]{32}", hex32):
              return f"{hex32[0:8]}-{hex32[8:12]}-{hex32[12:16]}-{hex32[16:20]}-{hex32[20:]}"
            return hex32
      
          def fetch_db(dbid):
            # try as-is
            r = requests.get(f"https://api.notion.com/v1/databases/{dbid}", headers=H, timeout=30)
            if r.status_code == 200:
              return r.json()
            # try hyphenless
            dbid2 = undash(dbid)
            if dbid2 != dbid:
              r = requests.get(f"https://api.notion.com/v1/databases/{dbid2}", headers=H, timeout=30)
              if r.status_code == 200:
                return r.json()
            # try hyphenated
            dbid3 = dash32(dbid2)
            if dbid3 != dbid and dbid3 != dbid2:
              r = requests.get(f"https://api.notion.com/v1/databases/{dbid3}", headers=H, timeout=30)
              if r.status_code == 200:
                return r.json()
            # return last response for diagnostics
            return {"error": True, "status": r.status_code, "body": r.text, "tried": [dbid, dbid2, dbid3]}
      
          def search_databases(query="SeeRM"):
            payload = {"query": query, "filter": {"property":"object","value":"database"}}
            r = requests.post("https://api.notion.com/v1/search", headers=H, json=payload, timeout=30)
            if r.ok:
              res = r.json().get("results", [])
              print(f"Search returned {len(res)} databases visible to this integration:")
              for i,x in enumerate(res,1):
                name = x["title"][0]["plain_text"] if x.get("title") else "(no title)"
                print(f"  {i}. {name} — id: {x['id']}")
            else:
              print("Search failed:", r.status_code, r.text)
      
          comp_res = fetch_db(comp)
          intel_res = fetch_db(intel)
      
          ok = True
          if "error" in comp_res:
            ok = False
            print("\n❌ Companies DB check failed.")
            print("Status:", comp_res["status"])
            print("Tried IDs:", comp_res["tried"])
            print("Body:", comp_res["body"][:500])
          else:
            print("✅ Companies DB OK:", comp_res.get("title",[{"plain_text":"(no title)"}])[0]["plain_text"])
      
          if "error" in intel_res:
            ok = False
            print("\n❌ Intel DB check failed.")
            print("Status:", intel_res["status"])
            print("Tried IDs:", intel_res["tried"])
            print("Body:", intel_res["body"][:500])
          else:
            print("✅ Intel DB OK:", intel_res.get("title",[{"plain_text":"(no title)"}])[0]["plain_text"])
      
          if not ok:
            print("\nHint: Notion returns 404 both for non-existent IDs and when the integration lacks access.")
            print("1) Open each DB as a page → Share → invite your integration with edit access.")
            print("2) Ensure you're using the actual database ID (32 hex).")
            print("   - From the DB page URL, copy the 32-char ID just before ?v= (hyphens OK).")
            print("3) If inline DB, click 'Open as page' first; copying a view link can give a view or page ID.")
            print("\nDatabases visible to this integration (via /search):")
            search_databases("SeeRM")
            search_databases("Will")
            sys.exit(1)
          else:
            print("Notion preflight OK.")
          PY

      - name: Run external intel
        env:
          PYTHONPATH: ${{ github.workspace }}

          # Gmail auth (secrets)
          GMAIL_CLIENT_ID: ${{ secrets.GMAIL_CLIENT_ID }}
          GMAIL_CLIENT_SECRET: ${{ secrets.GMAIL_CLIENT_SECRET }}
          GMAIL_REFRESH_TOKEN: ${{ secrets.GMAIL_REFRESH_TOKEN }}
          GMAIL_USER: ${{ secrets.GMAIL_USER }}

          # Google CSE for web search (secrets)
          GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
          GOOGLE_CSE_ID: ${{ secrets.GOOGLE_CSE_ID }}

          # LLM (optional; falls back gracefully if absent)
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          OPENAI_CHAT_MODEL: ${{ vars.OPENAI_CHAT_MODEL }}

          # Notion (to write Latest + Intel archive)
          NOTION_API_KEY: ${{ secrets.NOTION_API_KEY }}
          NOTION_COMPANIES_DB_ID: ${{ secrets.NOTION_COMPANIES_DB_ID }}
          NOTION_INTEL_DB_ID: ${{ secrets.NOTION_INTEL_DB_ID }}

          # Email filtering (repo vars so you can change names without code)
          NEWS_GMAIL_QUERY: ${{ vars.NEWS_GMAIL_QUERY }}
          NEWS_PROFILE_SUBJECT: ${{ vars.NEWS_PROFILE_SUBJECT }}
          ATTACHMENT_REGEX: '.*\.csv$'

          # Runtime inputs / knobs
          FILTER_CALLSIGNS: ${{ inputs.callsigns }}
          PREVIEW_ONLY: ${{ inputs.preview_only }}
          INTEL_LOOKBACK_DAYS: ${{ inputs.lookback_days }}
          INTEL_MAX_PER_ORG: ${{ inputs.max_per_org }}
          DIGEST_TO: ${{ inputs.send_to || secrets.DIGEST_TO }}
          DIGEST_CC: ${{ secrets.DIGEST_CC }}
          DIGEST_BCC: ${{ secrets.DIGEST_BCC }}

          # Cost & runtime controls (optional repo vars)
          CSE_ONLY_IF_RSS_BELOW: ${{ vars.CSE_ONLY_IF_RSS_BELOW }}
          CSE_MAX_QUERIES_PER_ORG: ${{ vars.CSE_MAX_QUERIES_PER_ORG }}
          CSE_DISABLE_OWNER_QUERIES: ${{ vars.CSE_DISABLE_OWNER_QUERIES }}
          CSE_DISABLE_TAG_QUERIES: ${{ vars.CSE_DISABLE_TAG_QUERIES }}

          # Full-article fetching (optional repo vars; code has safe defaults)
          FETCH_ARTICLE_CONTENT: ${{ vars.FETCH_ARTICLE_CONTENT }}
          FETCH_MAX_PER_ORG: ${{ vars.FETCH_MAX_PER_ORG }}
          ARTICLE_READ_TIMEOUT: ${{ vars.ARTICLE_READ_TIMEOUT }}
          ARTICLE_MAX_BYTES: ${{ vars.ARTICLE_MAX_BYTES }}
        run: |
          python -m app.news_job

      - name: Read new callsigns (if any)
        id: newcs
        run: |
          if [ -f /tmp/new_callsigns.txt ]; then
            CS=$(cat /tmp/new_callsigns.txt)
            echo "callsigns=$CS" >> $GITHUB_OUTPUT
            echo "New callsigns: $CS"
          else
            echo "No new callsigns file found."
          fi

      - name: Generate baselines for new accounts
        if: ${{ steps.newcs.outputs.callsigns != '' }}
        env:
          PYTHONPATH: ${{ github.workspace }}

          # Gmail auth (secrets)
          GMAIL_CLIENT_ID: ${{ secrets.GMAIL_CLIENT_ID }}
          GMAIL_CLIENT_SECRET: ${{ secrets.GMAIL_CLIENT_SECRET }}
          GMAIL_REFRESH_TOKEN: ${{ secrets.GMAIL_REFRESH_TOKEN }}
          GMAIL_USER: ${{ secrets.GMAIL_USER }}

          # LLM + search (optional)
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          OPENAI_CHAT_MODEL: ${{ vars.OPENAI_CHAT_MODEL || 'gpt-4o-mini' }}
          GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
          GOOGLE_CSE_ID: ${{ secrets.GOOGLE_CSE_ID }}

          # Use same email filters or baseline-specific ones
          NEWS_GMAIL_QUERY: ${{ vars.BASELINE_GMAIL_QUERY || vars.NEWS_GMAIL_QUERY }}
          NEWS_PROFILE_SUBJECT: ${{ vars.BASELINE_PROFILE_SUBJECT || vars.NEWS_PROFILE_SUBJECT }}
          ATTACHMENT_REGEX: '.*\.csv$'

          # Dossier inputs
          BASELINE_CALLSIGNS: ${{ steps.newcs.outputs.callsigns }}
          PREVIEW_ONLY: 'false'
          BASELINE_LOOKBACK_DAYS: ${{ vars.BASELINE_LOOKBACK_DAYS }}

          # Notion (for dossier)
          NOTION_API_KEY: ${{ secrets.NOTION_API_KEY }}
          NOTION_COMPANIES_DB_ID: ${{ secrets.NOTION_COMPANIES_DB_ID }}
        run: |
          python -m app.dossier_baseline

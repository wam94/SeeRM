name: Analysis Job

on:
  workflow_dispatch:
    inputs:
      callsigns:
        description: "Optional: comma-separated callsigns to limit run"
        required: false
        type: string
      dry_run:
        description: "Dry run mode (no actual changes)"
        required: false
        default: "false"
        type: choice
        options: ["true","false"]
      lookback_days:
        description: "Intel lookback window (days)"
        required: false
        default: "10"
        type: string
      max_per_org:
        description: "Max items per org"
        required: false
        default: "5"
        type: string
  workflow_run:
    workflows: ["External Intel (News)"]
    types: [completed]

permissions:
  contents: read

jobs:
  analysis:
    runs-on: ubuntu-latest
    timeout-minutes: 45  # Increased from 30 to handle large datasets + SSL retries
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Pre-warm connections (SSL stability)
        run: |
          # Pre-warm Gmail and Notion API connections to reduce SSL failures
          echo "🔌 Testing API connectivity..."
          curl -s -o /dev/null -w "Gmail API: %{http_code} (%{time_total}s)\n" \
            https://gmail.googleapis.com/gmail/v1/users/me/profile || echo "Gmail API unreachable"
          curl -s -o /dev/null -w "Notion API: %{http_code} (%{time_total}s)\n" \
            https://api.notion.com/v1/users/me || echo "Notion API unreachable"
          echo "🌐 Network conditions checked"

      - name: Run analysis workflow
        env:
          # Gmail API
          GMAIL_CLIENT_ID: ${{ secrets.GMAIL_CLIENT_ID }}
          GMAIL_CLIENT_SECRET: ${{ secrets.GMAIL_CLIENT_SECRET }}
          GMAIL_REFRESH_TOKEN: ${{ secrets.GMAIL_REFRESH_TOKEN }}
          GMAIL_USER: ${{ secrets.GMAIL_USER }}

          # Notion API
          NOTION_API_KEY: ${{ secrets.NOTION_API_KEY }}
          NOTION_COMPANIES_DB_ID: ${{ secrets.NOTION_COMPANIES_DB_ID }}
          NOTION_INTEL_DB_ID: ${{ secrets.NOTION_INTEL_DB_ID }}

          # OpenAI API
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          OPENAI_CHAT_MODEL: ${{ vars.OPENAI_CHAT_MODEL || 'gpt-4o-mini' }}
          OPENAI_TEMPERATURE: ${{ vars.OPENAI_TEMPERATURE || '0.2' }}

          # Google Search
          GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
          GOOGLE_CSE_ID: ${{ secrets.GOOGLE_CSE_ID }}

          # Configuration
          ENVIRONMENT: 'production'
          DEBUG: 'false'
          DRY_RUN: ${{ inputs.dry_run }}

        run: |
          # Run the analysis workflow
          python -m app.main news \
            ${{ inputs.callsigns && format('--callsigns="{0}"', inputs.callsigns) || '' }} \
            --lookback-days='${{ inputs.lookback_days || '10' }}' \
            ${{ inputs.dry_run == 'true' && '--no-email' || '' }}

      - name: Upload HTML reports as artifacts
        if: always() # Run even if analysis fails
        uses: actions/upload-artifact@v4
        with:
          name: intelligence-reports-${{ github.run_number }}
          path: |
            reports/email_fallbacks/*.html
            github_artifacts/*.zip
          retention-days: 30
          if-no-files-found: ignore

      - name: Create workflow summary
        if: always()
        run: |
          # Create summary of fallback files if any exist
          if [ -d "reports/email_fallbacks" ] && [ "$(ls -A reports/email_fallbacks/*.html 2>/dev/null)" ]; then
            echo "## 📊 Intelligence Reports Generated" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "⚠️ **Email delivery failed** - Reports saved as HTML files and uploaded as artifacts." >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Available Reports:" >> $GITHUB_STEP_SUMMARY
            for file in reports/email_fallbacks/*.html; do
              if [ -f "$file" ]; then
                filename=$(basename "$file")
                size=$(du -h "$file" | cut -f1)
                echo "- 📄 **$filename** ($size)" >> $GITHUB_STEP_SUMMARY
              fi
            done
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "💡 **How to access**: Download the 'intelligence-reports-${{ github.run_number }}' artifact from this workflow run." >> $GITHUB_STEP_SUMMARY
          else
            echo "## ✅ Analysis Completed" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Intelligence reports were processed successfully." >> $GITHUB_STEP_SUMMARY
          fi
